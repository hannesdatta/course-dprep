Automation with make (in-class tutorial)
========================================================
author: Hannes Datta
date: 
autosize: true

<style>
.small-code pre code {
  font-size: 1em;
}
</style>

Before we get started I
=====================

- Last "content" week 
- Exam organization
  - registration via Osiris!
  - 3rd examination opportunity: likely after the summer; date unknown still
- Exam preparation
  - example questions on the course website (plus update to be released 3 March + solutions)
  - extra Q&A after the break: __10 March, 12.45-13.45__ (online, link on Canvas); prep well!

Before we get started I
=====================

- slide deck available on the [site](https://dprep.hannesdatta.com/docs/modules/week5/tutorial/make-tutorial/)!
- [download the `make` cheatsheet](https://tilburgsciencehub.com/topics/automation/automation-tools/makefiles/images/tsh_make_cheatsheet.pdf) from Tilburg Science Hub


Where we are heading today
==========

__Let's describe our tool stack...__

- We use **Git/GitHub** to collaborate on code
  - versioning of files - frequent commits
  - issues, branches and pull requests
  - management via project board
- We have learnt how to **explore data and engineer datasets**
  - Rmarkdown & plotting
  - `tidyverse` & data preparation, setup + ITO
- But... process is still *quite manual*
  - how to "run" code? (e.g., in which order, which files?)

__Today, we learn how to automate projects.__

Automation tools I
========
incremental: true

- Many automation tools on the market
  - Originally designed to automate software builds
  - Some software-specific (e.g., `target` in R)
  - Others are software- and OS-independent: launch other software programs (e.g., R) via the terminal/command prompt
- We use `make`
  - software- and OS-independent 
  - free/open source, widely used
  - probably one of the oldest ones on the market
  
  
Automation tools II
========

How to __use__ automation tools?

- (1) Right from the start of the project
  - goal: at every iteration of your project, *automate* all steps
  - motivation: safe time when having to re-run code, reduce mistakes
  - tips: 
      - at the beginning, can be no more than just running one script!
      - keep on updating `make`/automation throughout
- (2) Automate an existing project (__today's focus__)
  - goal: *automate* an existing project
  - main challenge: figure out dependencies & test
  - tips: 
      - start with automating *first* script, and run
      - continuously automate next steps

DO: Verify make and R are properly installed
=======

__If you can't run `make` and `Rscript` from your terminal, you won't be able to proceed.__

1. Verify __`make`__ is properly installed
  - open the terminal/command prompt and type `make` (enter). 
  - See this? `make: *** No targets specified` -- then it is __correctly installed__!
2. Verify you can run `Rscript` from the terminal/command prompt
  - type `Rscript` (enter). 
  - See output starting with `Usage: Rscript [options] file [args]`...? -- then you are *all set*!

Do: Getting familiar with today's data/practice project
========
class: small-code

Today's project is based on a prototype project using Airbnb data. Please __download the source code now__ (run code below).

```{r}
download.file('https://gist.githubusercontent.com/hannesdatta/1f764090ae3ebfaabe7a91ea4b971c3d/raw/2df12443cd144141dedb866967cbe985b97052f5/run_antwerp.R', 'run_antwerp.R')
```

1. __Open the file__ `run_antwerp.R` in RStudio to check out the code - can you run the first few lines? Does it work?
2. Try __running the file from the terminal__, by typing `Rscript run_antwerp.R`. What happens?
3. Try using this command instead: `R --vanilla < run_antwerp.R` - what difference does it make?

What we will do
==========

- We will automate each step in this research project
- At every iteration, we will run step 1, then step 1 + 2, then step 1 + 2 + 3.
- Formally, the __make workflow__ is:
  - 1) delete all temporary/input files
  - 2) run `script_X.R` from the command line - does it run & build what is expected?
  - 3) write a `make` "recipe" to automate step 2
  - 4) preview what make would do - fix if needed (`make -n`)
  - 5) run make
- Repeat make flow, for the next step of the project.


Understanding `run_antwerp.R`
=====

- One script that prepares and analyzes data
- But: in reality, our project will consist of *multiple code snippets*
  - ...and each of these code snippets depends on other code snippets and data
  - ...and feature nicely structured ITO-blocks (remember?)
<br>

__We will now gradually "modularize" (split in multiple code files) and automate our project, using `make`.__

Writing our first make recipe
=====

- To automate projects, we will write a `makefile` and put it in the root of our project directory
- A `makefile` consists of one or multiple "recipes"
  - what to build? (filenames!)
  - what are prerequisites, dependencies? (also files)
  - how to build it? (a command to execute stuff)

DO: Writing our first make recipe
==============

- Create a new file, called `makefile` (no extension)
- Paste the code below and save (use a __tab__ to indent `R --vanilla` or `Rscript`...)
- Then type `make` on terminal. What happens?

```
plot_all.pdf: run_Antwerp.R
  R --vanilla < run_Antwerp.R
```

DO: Running make again
======

__Let us now change something in the source code of `run_antwerp.R`, e.g., change `Universiteitsbuurt` to `Stadspark  to experience a `make` workflow.__

- Type `make -n` (preview what will have to be done)
- Type `make` (to run the pipeline)
- Type `make` again (verify everything up-to-date & makefile has been correctly specified)

__Last step really important and often forgotten in projects.__

DO: Cleaning up the project directory
=====

When working with `make`, it's handy to keep our project tidy (i.e., get right of "old" files automatically).

Try implementing such a `clean` rule in `make`:

```
clean:
  R -e "unlink('*.pdf')"
```

1. Run the rule by typing `make clean`. What happens? 
2. Do we need to add more file extensions? Just add some lines and try again!
3. Does this code snippet feature ITO building blocks?
4. What does `R -e` do?

Towards modularization 
=======

- We ultimately will have to split our project in [separate files](https://github.com/hannesdatta/course-dprep/raw/master/content/docs/week5/tutorial/images/dependencies_Antwerp.png). (Why?)

![](https://github.com/hannesdatta/course-dprep/raw/master/content/docs/modules/week5/tutorial/images/dependencies_Antwerp.png)

__How?__ split up code, implement setup + ITO, write `makefile` rule, test rule. Step-by-step.

Demonstration: ITO and make for download.R
=====

- Dependencies: only itself, `download.R`
- Targets: `listings.csv` and `reviews.csv`
- How to execute: `Rscript download.R`
<br><br>
- Define one global rule on top of the `makefile` to be able to run it.

Do: Let's continue splitting up our project and trying to automate it
=====

![](https://github.com/hannesdatta/course-dprep/raw/master/content/docs/modules/week5/tutorial/images/dependencies_Antwerp.png)

__How?__ split up code, implement ITO, write `makefile` rule, test rule. Step-by-step.


Getting the directories right
=====

- We now should have a fully automated pipeline. 
- But... we have not cleanly separated `src` files from generated output files. See also [here](https://tilburgsciencehub.com/structure/project-setup/?utm_campaign=referral-short) for full description on how to name directories.

- __Do:__
  - Create a `src` code directory and move source code files there
  - Use code to create a `gen` directory in an R file (preferably run early on)
  - Change directory names in output files in `.R` files
  - At each step, verify whether `make` still runs.
  
If we have time left...
======

- I could clone one of your team repositories and 
  - try automating the first few steps...
  - contributing my code via a pull request.

Let's take a step back...
====

- Make is the final software package we cover in this course
- Like always in coding, take __one step at a time.__
  - Do not write "one large code chunk" that doesn't work
  - Instead, work in small steps from a working code snippet to another working code snippet.
- Make "accompanies" your coding, and constantly allows you to check whether you've done things right.
- Can become a great timesaver in your career!

Reflection
=====

- You've covered it all - congrats!
- Now it's time to let it sink in. __And practice.__
  - GitHub for code and project management (not data!). Work locally.
  - Work according to scrum method in feature branches.
  - Explore, prepare and analyze data using R. Focus on workflow, proper setup + ITO building blocks
  - Automate entire pipeline - ensure it runs on other computers
  - Do all steps at the same time. Not separately!
- This is a __state-of-the-art toolkit__ that will put you ahead of the curve in productivity. In your Master program, and beyond.

Next steps
======

- Three more coaching sessions
  - one today (on campus)
  - two more (week 6 on site, and end of week 7 - online; attendance optional)
  - will create breakout rooms online
- Exam preparation
  - in final lecture (beginning of week 7)
- Any questions?
