dPrep - Course Summary & Exam Preparation
========================================================
author: Hannes Datta
date: 
autosize: true

<style>
.small-code pre code {
  font-size: 1em;
}
</style>

<!--#

https://support.rstudio.com/hc/en-us/articles/200486468
-->

Welcome to the final lecture in dPrep!
========================================================

<br><br>

If you haven't done so, please **explore the exam page & example questions** at [https://dprep.hannesdatta.com/docs/exam]().

The __course evaluation__ is live at https://app.evalytics.nl. Please voice your opinions!

<!--
- Team project:

It's going well so far
Totally lost, but I know how to get on track
I lack adequate support - heeeelp!

- How did you like the course format?

scale from 1-10

- How did you like the course content?

scale from 1-10

To be announced:
- course evaluation: will post link
- team projects due - anybody still need feedback? sign up for dprep slots
https://docs.google.com/spreadsheets/d/1Tf9oypJhAlDN4m9JTKYzt66dvmiLdBewF3coWpe97_U/edit#gid=0
- add me to linkedIn: https://www.linkedin.com/in/hannes-datta/ [crucial to stay in touch]


-->

Agenda
========================================================

- Course summary
- From here onwards
  - During your studies
  - After your studies
- Course evaluation
- Exam preparation
- Remaining questions / Q&A


Course framework
========================================================

![dprep](dprep_framework.png)


Positioning in the study program
========================================================

![dprep](dprep_positioning.png)
 
  
Lessons learnt #1: Versioning and Project Management with Git(Hub) (I)
========================================================
incremental: true

- Scrum & the project board as a way to collaborate with one another
  - Writing issues is hard (!)
  - Seems to put a lot of structure on stuff, did it work out?
  - Recall how to work together -- team <-> individual
- Versioning can be powerful!
  - delete stuff that isn't needed
  - GUI (e.g., in R) are cool (and much easier to use!)
  - Oh no! Can't push!
  - Rolling back whenever you want
  
Lessons learnt #1: Versioning and Project Management with Git(Hub) (II)
========================================================
incremental: true

- Know what to version, and what not
- Collaborate on open source projects
  - You know what PRs are!
  - You may even actually contributed to public projects!
- Learn the tools used in business
  - But: takes a lot of time to become good at

Lessons learnt #2: Data Exploration
========================================================
incremental: true

- RMarkdown! (mixing code with reporting)
  - ability to quickly produce clean docs to share!
  - uh... but how to run it w/ make?
  - __verify you can render markdown documents on your computer!__
- Doing data quality checks? 
  - getting back to your data supplier if needed!
  - reporting summary stats
- Use it when it is useful (e.g., produce a doc, slides, etc., NOT data cleaning)

Lessons learnt #3: Data Engineering
========================================================
incremental: true

- Why do we actually *have* to clean up data?!
  - re-watch it: https://youtu.be/z_Hh1jlL1Ac
- Data prep code can be sooo complex
  - so... use cheatsheets (also for the exam!)
  - know & apply common data operations (what are those?)!
- Make ITO blocks
  - setup to load libraries, __then__ input, transformation, output!
  - super crucial for `make`, too!
- Modularize code, iterate, and use functions

Lessons learnt #4: Pipeline building and automation
========================================================
incremental: true

- Clarity about *where* to store stuff
  - review! (components - `src`, `gen`, `data`; modules - e.g., `analysis`, `data-prep`, ...)
- Run the work others have done
  - my work, your work, somebody else's work (e.g., text mining stuff on tilburgsciencehub.com)
- Discover mistakes in code
  - e.g., packages that weren't loaded, order of cells/code
- Save time!
  - but, yeah, NOT at the beginning when you still learn
- Continuously improve documentation & code

Common mistakes w/ make
==========

- Multiple targets, not multiple rules
- The *all* rule: think of it as a "first" rule only!
- Gradually building your makefile
- Remember, __go in baby steps!__
- Happy to take a look at your repositories now - anyone?

Any other questions about your projects?
=======

__We can address them now!__

Reflection about the course
========================================================

- it's amazing to see you learn & grow!
  - I feel I can talk to programmers!
  - You see code and feel what it does!
  - that feeling you get when your code runs...!
- different levels
  - many started R from scratch
  - others thought they could program, but were challenged, too!
- saw so much: different projects, datasets, software programs, "way of doing things", way of coding, videos, websites

My recommendation: take time to let it sink in. And trust in my choice of teaching you this. __Your hard work will pay off.__

Looking ahead: During your studies (I)
========================================================
incremental: true

- Gradually implement across classes or projects
  - e.g., some projects just benefit from better directory structure, while others may need "more"
- Realize it takes time to learn
  - it took me years to become proficient

Looking ahead: During your studies (II)
========================================================
incremental: true

- Use for thesis!
  - but, be aware your skills are *so* fresh, your professor likely has never heard about it! --> use, teach, show how productive you are!
- Build your job market profile
  - e.g., have a Hugo website with your CV
  - e.g., "pin" your best repositories (but don't call them `dprep-team-X`; remember, you're a marketer!)
  - have a compelling about page on GitHub

Looking ahead: During your studies (III)
========================================================
incremental: true

- Become part of the open science community at Tilburg
  - contribute to [Tilburg Science Hub](https://tilburgsciencehub.com)
  - follow us on [LinkedIn](https://www.linkedin.com/company/tilburgsciencehub/) and [Twitter](https://twitter.com/tilburgscience)
- Invest in your research skills (e.g., Docker, singularity, coding)

Looking ahead: After your studies
========================================================
incremental: true

- automate stuff, save time for the things you love!
- be confident - and keep on learning (e.g., [Tilburg Science Hub](https://tilburgsciencehub.com), [Datacamp](https://datacamp.com), [Data carpentry](https://datacarpentry.org), [software carpentry](https://softwarecarpentry.org), [The Turing Way](https://the-turing-way.netlify.app/welcome))


Next steps: Submissions and preparing for the exam
========================================================

- Deadline for project coming up!
  - remember: __make it work__ on different computers and operating systems
  - __avoid__ absolute paths!
  - verify data can be downloaded smoothly
  - test `make` thoroughly (demonstration if we have the time)
- Exam preparation
  - https://dprep.hannesdatta.com/docs/exam/
  - https://dprep.hannesdatta.com/docs/exam/examplequestions/

Exam overview: Practical part
=============

- Organization
  - When: 3 April, 10am - 11.59am + 1 minute, take home
  - Work max. 2 hours on this part
- How?
  - open book, on your computer
  - ChatGPT/GitHub Copilot et al. ONLY when explicitly asked for.
- What?
  - let's look at [some questions now](https://dprep.hannesdatta.com/docs/exam/examplequestions/#practical-part)
  - prep well - expect new datasets that are big (too big maybe even) -- aggregation!

Exam overview: Theoretical part
=============

- Organization
  - When: 4 April, 1pm - 3.15pm (jointly w/ oDCM; break of 15 minutes inside)
  - Work max. 1 hour on this part
- How?
  - closed book
  - I can make selected resources available on the instruction page. __Which ones?__
- What?
  - let's look at [some questions now](https://dprep.hannesdatta.com/docs/exam/examplequestions/#theoretical-part)

Some tips for your exam
=======
incremental: true

- Expect an unexpected data set & data wrangling
- Know common data operations in `dplyr` & become fast!
- When handing in documents, check what I require (for `.Rmd`, I sometimes ask for rendered `.pdf` documents - does it work on your computer?)
- Be prepared to contribute to open source projects on GitHub -- know how to do PRs, roll back to previous versions, write issues, etc.
- Be prepared to run, correct and develop new `make` workflows



Next steps: Official course evaluation
========================================================

- Course evaluation has been immensely important to this course
  - this semester: coaching sessions with breakout groups
  - last semester: developed new on-campus tutorials, released example projects
- Course evaluation has been critical to my career
  - Without my past evaluations, I wouldn't be teaching to you today
  - I will look at all comments. 
  - __Scores are most important to show importance of this course__

- You will be invited via [Evalytics](https://app.evalytics.nl/#/login)


Informal feedback
========================================================
incremental: true

- Coaching sessions?
- Use of Pulse?
- How was it for beginners? 
- What's are three things you'd like me to change?



Stay in touch!
========================================================

- Stay in touch
  - [LinkedIn](https://www.linkedin.com/in/hannes-datta/),[YouTube](https://www.youtube.com/c/hannesdatta), [Twitter](https://twitter.com/hannesdatta)
  - WhatsApp! +31 13 466 8938
- Contribute to __Tilburg's Open Science initiatives__! 
  - https://tilburgsciencehub.com as content developer / community manager
  - change this course at https://github.com/hannesdatta/course-dprep
- Watch out for dPrep and oDCM master thesis topics!
<br><br>
- __And, finally... let's show to the world how awesome your new skills are!__


