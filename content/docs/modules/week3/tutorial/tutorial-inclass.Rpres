GitHub  (in-class tutorial)
========================================================
author: Hannes Datta
date: 
autosize: true


Structure of today's sessions
========================================================

- In-class part of GitHub tutorial
  - matters because you will manage your project on GitHub
- Coaching session 
  - Setup repository, sync to your computers
  - Know the Git workflow: branches, commits, pull requests (PRs)
  - Converge on RQ for project
- After class
  - Please go through the entire tutorial on the [dprep site](https://dprep.hannesdatta.com/docs/modules/week3/tutorial/version-control.html). 

Before we code...
====

- Review shell/command line/terminal commands!
- There are (optional) tutorials for that, too!
  * [DataCamp Introduction to Shell](https://datacamp.com/courses/introduction-to-shell) (chapter 1; for Mac & Windows users) 
  * [How To Use The Command Line](https://generalassembly.github.io/prework/cl/#/) (optional - only for Mac users)
- Feel you want to be challenged more?
  - Flip through my deck - complete exercises faster
  - Check out the ideas on the last slide for what you could do to make your GitHub profile stand out.

Introduction to GitHub
========================================================
incremental: true

- What is Git? (&rarr; file versioning in "repositories"/folders, open source)
- What is GitHub? (Git + platform for collaboration, automated testing & deployment; commercial but "free" when open source, owned by Microsoft)
- Alternatives to GitHub (e.g., Bitbucket, GitLab; on-site installation possible, too)
- GitHub (or its alternatives) are used to **professionally manage** research and software development projects
- Most recently, public GitHub repositories were used to train GitHub Copilot, Microsoft's coding AI

Exploring projects on GitHub.com
================================

- List of project topics at https://github.com/topics

Overview about a repository
============================
incremental: true

- Each repository has...
  - readme w/ project description (`README.md`)
  - meta data (e.g., about, releases, stars)

- On a repository, we can find several tabs
  - Code (we can have code on multiple 'branches')
  - Pull requests (to collaborate; merging branches)
  - Issues (think of it as to dos)
  - Projects (organize your to dos)
  - Discussions (social feature)
  - (and many more...)

DO: Creating a repository on GitHub.com
=================

- Normally, we start a new repository on GitHub.com, or start from an existing folder on our computer
<br><br>
- __Today__, we use "GitHub classroom" (so I can see what you're up to)
  - Open this link, please: https://classroom.github.com/a/hQv-HrMs
  - Change title of `readme.md` to "First repository with exercises in dPrep" & __commit__ your changes on GitHub.com
  
Recap
===========

- In essence, we use Git/GitHub for adding/changing code
- Whenever we save code in __Git's version history__, we call this a "commit"
- Everybody who has access to this Git repository will be able to roll back to this version
<br><br>
- __Question: Why make a difference between *saving* and *committing*?__

Working with Git/GitHub
=================================

- Git on your own computer for *actual* coding and file versioning
  - e.g., terminal, GitHub desktop, RStudio, etc.
  - reason: software setup will be correct, no cloud fees, etc.

- GitHub.com for interactive web interface and project management
  - issues, project boards
  - reviewing code contributions (pull requests)
  - browsing version history, etc.
  - __no code changes__ (unless typos)
  - __no code uploads__ (always through *Git*)

<br>

__We first proceed with the interactive interface on GitHub.com.__


Using GitHub for collaborating in teams
========

- The [Scrum method](https://tilburgsciencehub.com/learn/scrum) is 
  - an effective project management tool
  - meant to be helpful, not distracting
- Key ingredients
  - Break down project in smaller to do's ("issues"), 
  - organize them on your project board, and 
  - meet to discuss progress in sprints.
  
Note: I will have to make you members of the organization for this to work... (let's see - otherwise we move up until after the break)

Project Management on GitHub
======

- Issues: Individual to do's
- Project board: Use to organize & prioritize individual issues

We now start with the project board. Afterwards, we talk about issues.


DO: Organize project board
=========================

__Task:__
- Navigate to your repository's project page, and create a __new board__.
- Create columns to organize tasks, call them
  - backlog, 
  - to do, 
  - in progress, 
  - done.

When finished, you should have an empty board with four columns (you may want to change to card view).

Let's talk about issues ("to do's")
======================

- __Discrete__, __well-defined units of work__ on a project
  - shouldn't be more than a few hours of work
  - shouldn't be open for forever
  - have clear __deliverables__, and __assignees__
- __Adaptivity__
  - scope may grow or shrink as new questions arise
  - e.g., change title where needed
- __Prioritization__ on project board

<br>
*View [tips about writing effective issues](https://tilburgsciencehub.com/write/issues/?utm_campaign=referral-short)*.

DO: Let's create our first issue
==================

- Open a new issue
  - Title: Fix readme
  - Goal: The goal of this issue is to update the readme to conform with best practices.
  - Resources: https://tilburgsciencehub.com/write/readme/
  - Deliverables: An updated readme in a new branch + a pull request

- Assignment
  - the issue to the "to do" column of your project board
  - make yourself "assignee" 

Tip: For now, let's say you need to add the motivation of your project to the readme.

DO: Let's perform the Git Workflow (online)
======================

__Overview available at https://dprep.hannesdatta.com/docs/project/resources/cheat-sheets/__

1. Check your project board and find an issue to work on
2. Create a __development branch__ (online interface works best)
3. Make necessary changes (here: online, but later on your local computers), update the Git issue throughout
4. When done: Make __pull request__

__I'll first demonstrate it on one of my own repositories. You can then repeat these steps on your own repository.__

Summary: Managing your project and working with Git (I)
========================

You iterate between the following stages.

__1) Team meeting ("scrum meeting")__
  - go through issues on the project board: start with "done", then "in progress", and not started (+ why)
  - review and integrate open pull requests one by one + check whether project still runs
  - assign new issues
  - optional: write new issues & assign team members
  - (re)prioritize issues on your project board
  - set date & time for next group meeting

Summary: Managing your project and working with Git (II)
========

__2) Individual work__
  - work on your assigned issues
  - help others work on theirs, e.g., if they are stuck
  - review pull requests, to make the PR review for the team meeting more efficient
  - got some new ideas (and you will!)? 
    - start writing an issue
    - put it in the __backlog__ on the project board - it will be discussed during the next meeting

<br>
__Meet again with your team.__  

Repeat workflow until you're done (or the deadline has passed...)


GitHub (online interface) vs. Git
==========================
incremental: true

- For now, we only used GitHub.com
- Ultimately, we seek to build a code base for our project
- Likely won't be able to run R, Python etc. in the cloud
- Need a way to get our work from GitHub.com synced with our local computers
- For now, assume we want to work on our own computer

GitHub (online interface) vs. Git
==========================
incremental: true

- Let's introduce some Git vocab here
  - `git clone` repository to which you have access to (once)
  - `git pull` to update from the cloud (before starting to work)
  - `git status`, `git add`, `git commit -m "message"` (multiple times)
  - `git push` to push changes to cloud (after finishing work)
  
DO: Clone repository and verify you see the repository
======

1.) Copy the URL to *your* class room repository

2.) Open Git Bash, and type 

`git clone https://github.com/course-dprep/XXXXXXX` 

(__REPLACE XXXXXXX with the name of your repository, which you find in the URL of your browser__)

3.) Check whether you see your repository on your computer (e.g., Windows Explorer)

<br>
__Got an error?__ ("Support for password authentication was removed on August 13, 2021") &rarr; Check [how to fix it here](https://dprep.hannesdatta.com/docs/course/support/).


What we do in Git
======
incremental: true

- Once the repos is available locally, we can "work" in it.
  - e.g., add code, run data preparation, etc.
  
- While doing so, we make "commits" (we save code in our unlimited version history)

- We can do so on different branches - each issue has its own development branch

- You next learn how to do all of this.


DO: Let's perform the Git workflow
======

1. Create a new issue on GitHub.com, and create a development branch ("change readme")
2. __Check out the development branch locally__ (mostly `gh pull XXXX`)
3. Verify you're on the development branch, NOT on the master/main branch (`git status`)
4. Add something to the readme and save (note, not yet committed)
5. Perform Git workflow
  - `git status` (view changes)
  - `git add <filename>` (add file(s) to "staging area")
  - `git commit -m "message"` (freeze commit)
  - `git push` (push to GitHub; sometimes also `git push -u origin branch_name`)
6. View changes on GitHub.com - do you see them?

Development branches vs. master/main branch
===========

- The `master`/`main` branch holds your *working version* of your project.
- All "smaller" features are developed in separate development branches
  - These are not called `hannes-123`, but named by a feature
  - They are ideally created on GitHub.com and checked out locally
- When your work on a branch is done, create a __pull request__ (your team members can now integrate your changes)

Reviewing and merging pull requests
====================

It's good practice to assign *reviewers* to new pull requests.

1. Identify a pull request (PR) to review
2. Locally check out the development branch
3. Test whether the code runs and does not throw any errors, etc.
  - If "content" errors: add comments to the issue/PR, and request changes
  - If merging errors: fix them
  - If everything runs smoothly: say so in the issue as well, and accept the PR
4. Click "merge" on GitHub.com (or, better, wait for the team meeting and do these things together)


Rolling back
===============

- When working with Git, we can always roll back to previous versions of a file
- Each "file" is tagged with a commit hash (we can view those on GitHub.com or using `git log`)
<br>
<br>

1. Identify the hash of one of your earlier commits
2. Type `git checkout <commithash> filename` (will overwrite old file)
3. Verify this is the old file!
4. Go back to the latest version: `git checkout filename`


(Alternatively, use: `git show <commithash>:filename > old_filename`) to get the old file as a second file.)


There are many other features worthwhile to explore
===============

- Working on open source projects (forking & PRs) vs. being a collaborator (direct pushes)
- Exploring version history
- Comparing changes between files
- Using alternative Graphical User Interfaces
  - RStudio (requires a project)
  - Visual Studio Code
  - GitHub desktop
  
Working with GitHub requires a new mindset
=========================

1. There is one working version of our project -- it's in the `main` branch (vs.: we work in one synchronized folder in the cloud)
2. All 'development steps' are to be taken in development branches (vs.: I call my file `rfile-hannes1.R`)
3. Communication is done exclusively on GitHub -- namely, in issues (unless when meeting in person) (vs.: we email, call, WhatsApp, use Zoom, teams, and then forget what we talked about)
4. We adhere to the Scrum project management system: project board, issues, prioritization 
5. GitHub is for *code*, not for data (so, do not commit any data files) [more later in this course]

Summary
=============

- GitHub vs. Git: cloud vs. local computer
  - GitHub: project management w/ board & issues, synchronization
  - Git: "clone" repository, work locally
- How to use?
  - Always Git for working on code, never the cloud (!!!)
  - Git workflow: issue, development branch, `git checkout`, `git pull`, `git status`,  `git add`, `git commit`, `git push`
- Beware
  - you will encounter "merging issues" - completely normal; you will learn how to solve them w/ Roshini


Next steps
===============

- Start with the [tutorial](https://dprep.hannesdatta.com/docs/modules/week3/tutorial/version-control)
- Use the cheat sheets throughout
- Excellent practice tool: https://learngitbranching.js.org/
  - Main: Introduction Sequence
  - Remote: Push & Pull, To Origin and Beyond
- Coaching
  - Start working on your project (e.g., set up a repository in our `course-dprep` organization)
- __Idea: Invest in your GitHub profile (design an about page)__

Some fun activity if you're getting bored...
=========

- Create an amazing GitHub About page for your profile (important for job market!) 

**How to Start:**
- Dive into [GitHub's customization guide](https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/customizing-your-profile/about-your-profile) for step-by-step instructions.
- Pin repositories that highlight your skills and what you're passionate about.
- Add a touch of personality: share your tech stack, what drives you, and where you aim to go.
- A few examples: https://github.com/FranciscaOrtizRuiz, https://github.com/rodrigo-arenas, https://github.com/archd3sai, https://github.com/natnew - ideas on how to make your page stand out
