---
title: "Version Control with Git - Tutorial"
format: 
  beamer:
    theme: metropolis
    colortheme: seahorse
    linkcolor: blue
editor: visual
---

# Learning goals

-   Understand and apply basic Git commands
-   Set up repositories in GitHub
    -   Create branches
    -   Commit changes
    -   Resolve conflicts
-   Collaborate on GitHub projects
-   Restore previous versions of work and manage content using `.gitignore`

# IMPORTANT NOTE

-   Make sure you read chapters 5 and 6 of the text book.
-   We only cover **some** exercises from the tutorial in class. Please complete the rest of the exercises on your own.
-   Have questions and I'm taking too long to arrive? Try out our [chatbot.](https://chatbot.tilburg.ai/private/invite?token=eda28565-ecaa-4ef0-ab01-208bdd2144ae) It is trained with the material for today's class and likely issues you will face.

# Introduction to Git and GitHub

-   **Git**: A **version control system** that tracks changes to files over time, allowing you to revert to previous versions, collaborate, and manage code efficiently.
-   **GitHub**: A **hosting service** for Git repositories, providing tools for collaboration, issue tracking, and project management.

# Tutorial: Exercise 1

-   Visit the [course repository](https://github.com/hannesdatta/course-dprep)
-   Who is the creator of the repository? What happens once you click on his username?
-   Where can you find the `tutorial` folder?
-   What happens once you switch to another branch? (e.g., `dev`)
-   Can you find a way to see previous versions of how the repository looked like?

# Exercise 2: Creating a repository

-   Create a repository on GitHub
-   Go to + sign on your account
    -   Give it the name "version-control-exercises"
    -   Add a readme file
-   Save repository and edit the read me file
    -   Commit the changes

# Exercise 2: Cloning your repository

-   Clone the repository using '`git clone` <link-to-your-repo>'
    -   Make sure you save it in the folder for this tutorial
-   Checkout that the folder exists in your machine!

# Important Git commands

-   `git status`: Shows the status of your working directory (e.g., untracked or modified files).
-   `git add`: Adds changes to the **staging area**, preparing them for commit.
-   `git commit`: Saves a snapshot of the staged changes to the repository's history.

# Exercise 2: adding and committing

-   Create a new `my_answers.txt` in your machine
-   Commit the changes to your GitHub repo!
-   Check out GitHub, are your changes there?

# Exercise 2: pushing your changes

-   Push your changes onto your repo!
-   `git push origin main`
-   Now check out GitHub, your changes should be there!

# Excercise 4: logs

-   Remove `my_answers.txt` in your machine.
-   Look up the **commit ID** (a unique identifier for each commit, also called a **hash**) of the commit that included the file using `git log`.
-   Run `git checkout <commit-ID>` (where `<commit-ID>` is the hash from `git log`) and inspect your directory. Is the `my_answers.txt` file restored?

# Exercise 5: Using `.gitignore`

-   Create a new file called `my_secret_key.txt`
-   `cd` into version-control-exercises. Type touch `.gitignore`
-   In the .gitignore file, type `my_secret_key.txt` and save it.
-   Add and commit the `.gitignore` file, then push to the GitHub repository. Is the `my_secret_key.txt` file excluded from the repository?

# Excercise 6: working with branches

-   Create a new branch called '`dev`' and switch to it
    -   Tip: use `git checkout -b <branch-name>`, which creates a new branch
-   Create a new text file `my_notes.txt`
-   Add all files to staging area and commit changes. Comment "add notes file" in the commit.
-   Run `git log` on the dev branch. What does it say?
-   Switch to the main branch and run `git log`. What is the most recent commit message? Why?
